<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  ~ Copyright 2006-2009, 2017, 2020 United States Government, as represented by the
  ~ Administrator of the National Aeronautics and Space Administration.
  ~ All rights reserved.
  ~ 
  ~ The NASA World Wind Java (WWJ) platform is licensed under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~ 
  ~ Unless required by applicable law or agreed to in writing, software distributed
  ~ under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  ~ CONDITIONS OF ANY KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations under the License.
  ~ 
  ~ NASA World Wind Java (WWJ) also contains the following 3rd party Open Source
  ~ software:
  ~ 
  ~     Jackson Parser – Licensed under Apache 2.0
  ~     GDAL – Licensed under MIT
  ~     JOGL – Licensed under  Berkeley Software Distribution (BSD)
  ~     Gluegen – Licensed under Berkeley Software Distribution (BSD)
  ~ 
  ~ A complete listing of 3rd Party software notices and licenses included in
  ~ NASA World Wind Java (WWJ)  can be found in the WorldWindJava-v2.2 3rd-party
  ~ notices and licenses PDF found in code directory.
  -->

<project name="worldwind" default="build" basedir=".">
    <description>
        Build script for WorldWind Java. Assembles and tests the WorldWind source code, creates WorldWind API
        documentation, and bundles WorldWind library JAR files.
    </description>

    <!-- Import the ANT build properties and project ANT macros. -->

    <property file="release-build.properties"/>
    <import file="release-build.macros.xml"/>

    <!-- Main build targets. Provides generic targets that compile the Java sources, bundle JAR libraries, assemble API
         documentation, test the Java sources, and clean up the build output. -->

    <target name="build" depends="assemble, test"
            description="Default build target. Assembles and tests this project."/>

    <target name="clean" description="Deletes the build directory.">
        <delete dir="${worldwind.build.dir}"/>
        <delete file="${basedir}/worldwind.jar"/>
        <delete file="${basedir}/worldwindx.jar"/>
    </target>

    <target name="assemble" depends="assembleDebug, assembleRelease, assembleJavadoc, assembleSdkArchive"
            description="Assembles JAR libraries for all build types and assembles the project documentation."/>

    <!-- Targets for compiling Java sources and bundling JAR libraries. -->

    <target name="assembleDebug" depends="compileDebugSources, bundleDebug"
            description="Assembles JAR libraries for the debug build type."/>

    <target name="assembleRelease" depends="compileReleaseSources, bundleRelease"
            description="Assembles JAR libraries for the release build type."/>

    <target name="compileDebugSources">
        <mkdir dir="${worldwind.classes.dir}/debug"/>
        <compileJava srcdir="${worldwind.src.dir}" classdir="${worldwind.classes.dir}/debug" debug="true"
                     jdk="${worldwind.jdk}">
            <pathelements>
                <pathelement location="${basedir}/jogl-all.jar"/>
                <pathelement location="${basedir}/gluegen-rt.jar"/>
                <pathelement location="${basedir}/gdal.jar"/>
            </pathelements>
        </compileJava>
    </target>

    <target name="compileReleaseSources">
        <mkdir dir="${worldwind.classes.dir}/release"/>
        <compileJava srcdir="${worldwind.src.dir}" classdir="${worldwind.classes.dir}/release" debug="false"
                     jdk="${worldwind.jdk}">
            <pathelements>
                <pathelement location="${basedir}/jogl-all.jar"/>
                <pathelement location="${basedir}/gluegen-rt.jar"/>
                <pathelement location="${basedir}/gdal.jar"/>
            </pathelements>
        </compileJava>
    </target>

    <target name="bundleDebug">
        <mkdir dir="${worldwind.jar.dir}/debug"/>
        <bundleJarFiles srcdir="${worldwind.src.dir}" classdir="${worldwind.classes.dir}/debug"
                        destdir="${worldwind.jar.dir}/debug" debug="true"/>
    </target>

    <target name="bundleRelease">
        <mkdir dir="${worldwind.jar.dir}/release"/>
        <bundleJarFiles srcdir="${worldwind.src.dir}" classdir="${worldwind.classes.dir}/release"
                        destdir="${worldwind.jar.dir}/release" debug="false"/>
        <copy file="${worldwind.jar.dir}/release/worldwind.jar" tofile="${basedir}/worldwind.jar"/>
        <copy file="${worldwind.jar.dir}/release/worldwindx.jar" tofile="${basedir}/worldwindx.jar"/>
    </target>

    <!-- Targets for compiling and bundling the project documentation.  -->

    <target name="assembleJavadoc" depends="compileJavadocSources, bundleJavadoc"
            description="Assembles the project documentation."/>

    <target name="compileJavadocSources">
        <mkdir dir="${worldwind.doc.dir}/javadoc"/>
        <javadoc destdir="${worldwind.doc.dir}/javadoc"
                 overview="${worldwind.src.dir}/overview.html"
                 encoding="UTF-8"
                 windowtitle="NASA WorldWind" doctitle="NASA WorldWind" header="NASA WorldWind"
                 splitindex="true" protected="true" nodeprecated="true" version="false" author="false" use="true"
                 maxmemory="1024m">
            <arg value="-Xmaxerrs" />
            <arg value="10000" />
            <arg value="-Xmaxwarns" />
            <arg value="10000" />
            <packageset dir="${worldwind.src.dir}" defaultexcludes="yes">
                <include name="gov/nasa/worldwind/**"/>
                <include name="gov/nasa/worldwindx/**"/>
                <exclude name="gov/nasa/worldwind/formats/**"/>
            </packageset>
            <classpath>
                <pathelement location="jogl-all.jar"/>
                <pathelement location="gluegen-rt.jar"/>
                <pathelement location="gdal.jar"/>
            </classpath>
            <link href="http://download.oracle.com/javase/8/docs/api/"/>
            <link href="https://jogamp.org/deployment/v2.4.0-rc-20200307/javadoc/"/>
        </javadoc>
    </target>

    <target name="bundleJavadoc">
        <mkdir dir="${worldwind.doc.dir}"/>
        <zip destfile="${worldwind.doc.dir}/worldwind-javadoc.zip">
            <fileset dir="${worldwind.doc.dir}/javadoc">
                <include name="**"/>
                <type type="file"/>
            </fileset>
        </zip>
    </target>

    <!-- Targets for assembling the project SDK archive. -->

    <target name="assembleSdkArchive" depends="assembleRelease">
        <zip destfile="${worldwind.build.dir}/worldwind.zip">
            <fileset dir="${basedir}">
                <include name="**/*"/>
                <exclude name="build/**"/>
                <exclude name="classes/**"/>
                <exclude name="testClasses/**"/>
                <exclude name="keystore.properties"/>
                <exclude name="keystore.tar"/>
                <exclude name="wwstore"/>
                <type type="file"/>
            </fileset>
        </zip>
    </target>

    <!-- Targets for testing the project sources. -->

    <target name="test" depends="unitTest"
            description="Runs all project tests. Exits with status code 1 if any test fails.">
        <fail if="unitTest.failure" message="Unit tests FAILED" status="1"/>
    </target>

    <target name="unitTest" depends="assembleDebug, compileUnitTestSources, runUnitTest"/>

    <target name="compileUnitTestSources">
        <mkdir dir="${worldwind.classes.dir}/test"/>
        <compileJava srcdir="${worldwind.test.dir}" classdir="${worldwind.classes.dir}/test" debug="true"
                     jdk="${worldwind.jdk}">
            <pathelements>
                <pathelement location="${worldwind.classes.dir}/debug"/>
                <pathelement location="${basedir}/jogl-all.jar"/>
                <pathelement location="${basedir}/gluegen-rt.jar"/>
                <pathelement location="${basedir}/gdal.jar"/>
                <pathelement location="${basedir}/junit-4.5.jar"/>
            </pathelements>
        </compileJava>
    </target>

    <target name="runUnitTest">
        <delete dir="${worldwind.test.results.dir}"/>
        <mkdir dir="${worldwind.test.results.dir}"/>
        <junit failureproperty="unitTest.failure"
               fork="on"
               forkmode="once"
               maxmemory="1024m">
            <classpath>
                <pathelement location="${worldwind.src.dir}"/>
                <pathelement location="${worldwind.classes.dir}/test"/>
                <pathelement location="${worldwind.classes.dir}/debug"/>
                <pathelement location="${basedir}/jogl-all.jar"/>
                <pathelement location="${basedir}/gluegen-rt.jar"/>
                <pathelement location="${basedir}/gdal.jar"/>
                <pathelement location="${basedir}/junit-4.5.jar"/>
            </classpath>
            <batchtest todir="${worldwind.test.results.dir}"
                       skipnontests="true">
                <fileset dir="${worldwind.classes.dir}/test">
                    <include name="**/*"/>
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="no"/>
            <formatter type="xml" usefile="yes"/>
        </junit>
        <junitreport todir="${worldwind.test.results.dir}">
            <fileset dir="${worldwind.test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${worldwind.test.results.dir}" format="noframes"/>
        </junitreport>
    </target>

    <!-- Tasks for assembling the MIL-STD-2525 symbology package. Rasterizes MIL-STD-2525 SVG image files into PNG image
         files. The maxwidth and height parameters control the PNG image dimensions, where the width varies depending on
         the SVG image's aspect ratio. PNG files are written to the destination directory according to their relative
         path in the source directory. -->

    <target name="assembleMilStd2525" depends="assembleRelease, compileMilStd2525, bundleMilStd2525"
            description="Assembles the MIL-STD-2525 symbology package."/>

    <target name="compileMilStd2525">
        <mkdir dir="${milstd2525.png.dir}"/>
        <!-- Rasterize the MIL-STD-2525 SVG sources. Exclude empty directories in order to suppress erroneous error
             messages from the Apache Batik Rasterizer. -->
        <apply executable="java" dest="${milstd2525.png.dir}" failonerror="true">
            <arg value="-jar"/>
            <arg value="${basedir}/lib-external/batik/batik-rasterizer.jar"/>
            <arg value="-m"/>
            <arg value="image/png"/>
            <arg value="-maxw"/>
            <arg value="${milstd2525.png.width}"/>
            <arg value="-h"/>
            <arg value="${milstd2525.png.height}"/>
            <arg value="-d"/>
            <targetfile/>
            <dirset dir="${milstd2525.src.dir}">
                <exclude name="fills"/>
                <exclude name="frames"/>
                <exclude name="icons"/>
            </dirset>
            <mapper type="identity"/>
        </apply>
        <!-- The Forward Edge of Battle (FEBA, 2.X.2.4.2.1) image has a custom height of 16 pixels. -->
        <apply executable="java" dest="${milstd2525.png.dir}" force="true" failonerror="true">
            <arg value="-jar"/>
            <arg value="${basedir}/lib-external/batik/batik-rasterizer.jar"/>
            <arg value="-m"/>
            <arg value="image/png"/>
            <arg value="-maxw"/>
            <arg value="${milstd2525.png.width}"/>
            <arg value="-h"/>
            <arg value="16"/>
            <arg value="-d"/>
            <targetfile/>
            <fileset dir="${milstd2525.src.dir}">
                <include name="**/g-g?dlf--------.svg"/>
                <type type="file"/>
            </fileset>
            <mapper type="glob" from="*.svg" to="*.png"/>
        </apply>
        <!-- Trim the MIL-STD-2525 modifier images to remove transparent borders. -->
        <apply executable="java" failonerror="true" parallel="true" maxparallel="100">
            <arg value="-cp"/>
            <arg value="${worldwind.classes.dir}/release"/>
            <arg value="gov.nasa.worldwind.util.ImageTrimmer"/>
            <fileset dir="${milstd2525.png.dir}">
                <include name="modifiers/**/*"/>
                <type type="file"/>
            </fileset>
        </apply>
    </target>

    <target name="bundleMilStd2525">
        <mkdir dir="${milstd2525.out.dir}"/>
        <zip destfile="${milstd2525.out.dir}/milstd2525-symbols.zip">
            <fileset dir="${milstd2525.png.dir}"/>
        </zip>
    </target>

    <!-- Helper tasks for bundling and unbundling the JOGL and GLueGen JAR files. Each Jar file is extracted to a folder
         matching the filename without its suffix. These targets are used to modify JOGL and GlueGen Jar file manifests
         in order to deploy these files from the WorldWind Java Web Start site. -->

    <target name="help.unpackJogl">
        <property name="jogl.jarfiles.dir" location="jogl-jarfiles"/>
        <mkdir dir="${jogl.jarfiles.dir}"/>
        <unzip src="jogl-all.jar" dest="${jogl.jarfiles.dir}/jogl-all"/>
        <unzip src="jogl-all-natives-macosx-universal.jar"
               dest="${jogl.jarfiles.dir}/jogl-all-natives-macosx-universal"/>
        <unzip src="jogl-all-natives-windows-i586.jar" dest="${jogl.jarfiles.dir}/jogl-all-natives-windows-i586"/>
        <unzip src="jogl-all-natives-windows-amd64.jar" dest="${jogl.jarfiles.dir}/jogl-all-natives-windows-amd64"/>
        <unzip src="jogl-all-natives-linux-i586.jar" dest="${jogl.jarfiles.dir}/jogl-all-natives-linux-i586"/>
        <unzip src="jogl-all-natives-linux-amd64.jar" dest="${jogl.jarfiles.dir}/jogl-all-natives-linux-amd64"/>
        <unzip src="gluegen-rt.jar" dest="${jogl.jarfiles.dir}/gluegen-rt"/>
        <unzip src="gluegen-rt-natives-macosx-universal.jar"
               dest="${jogl.jarfiles.dir}/gluegen-rt-natives-macosx-universal"/>
        <unzip src="gluegen-rt-natives-windows-i586.jar" dest="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-i586"/>
        <unzip src="gluegen-rt-natives-windows-amd64.jar" dest="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-amd64"/>
        <unzip src="gluegen-rt-natives-linux-i586.jar" dest="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-i586"/>
        <unzip src="gluegen-rt-natives-linux-amd64.jar" dest="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-amd64"/>
    </target>

    <target name="help.packJogl">
        <property name="jogl.jarfiles.dir" location="jogl-jarfiles"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all.jar" basedir="${jogl.jarfiles.dir}/jogl-all" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all.jar" basedir="${jogl.jarfiles.dir}/jogl-all" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all-natives-macosx-universal.jar"
             basedir="${jogl.jarfiles.dir}/jogl-all-natives-macosx-universal" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all-natives-macosx-universal/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all-natives-windows-i586.jar"
             basedir="${jogl.jarfiles.dir}/jogl-all-natives-windows-i586" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all-natives-windows-i586/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all-natives-windows-amd64.jar"
             basedir="${jogl.jarfiles.dir}/jogl-all-natives-windows-amd64" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all-natives-windows-amd64/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all-natives-linux-i586.jar"
             basedir="${jogl.jarfiles.dir}/jogl-all-natives-linux-i586" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all-natives-linux-i586/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/jogl-all-natives-linux-amd64.jar"
             basedir="${jogl.jarfiles.dir}/jogl-all-natives-linux-amd64" filesonly="true"
             manifest="${jogl.jarfiles.dir}/jogl-all-natives-linux-amd64/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt.jar" basedir="${jogl.jarfiles.dir}/gluegen-rt"
             manifest="${jogl.jarfiles.dir}/gluegen-rt/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt-natives-macosx-universal.jar"
             basedir="${jogl.jarfiles.dir}/gluegen-rt-natives-macosx-universal"
             manifest="${jogl.jarfiles.dir}/gluegen-rt-natives-macosx-universal/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-i586.jar"
             basedir="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-i586"
             manifest="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-i586/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-amd64.jar"
             basedir="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-amd64"
             manifest="${jogl.jarfiles.dir}/gluegen-rt-natives-windows-amd64/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-i586.jar"
             basedir="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-i586"
             manifest="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-i586/META-INF/MANIFEST.MF"/>
        <jar destfile="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-amd64.jar"
             basedir="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-amd64"
             manifest="${jogl.jarfiles.dir}/gluegen-rt-natives-linux-amd64/META-INF/MANIFEST.MF"/>
    </target>

    <!-- Helper tasks for bundling and unbundling the GDAL JAR file. These targets are used to modify the contents of
         the GDAL JAR file, which are currently not under source control. -->

    <target name="help.unpackGdal">
        <property name="gdal.jarfile.dir" location="gdal-jar"/>
        <mkdir dir="${gdal.jarfile.dir}"/>
        <unzip src="gdal.jar" dest="${gdal.jarfile.dir}"/>
    </target>

    <target name="help.packGdal">
        <property name="gdal.jarfile.dir" location="gdal-jar"/>
        <delete file="gdal.jar"/>
        <jar destfile="gdal.jar" basedir="${gdal.jarfile.dir}">
            <manifest>
                <attribute name="Permissions" value="all-permissions"/>
            </manifest>
        </jar>
    </target>

    <!-- Helper tasks for bundling and unbundling the VPF symbols JAR file. These targets are used to modify the
         contents of the VPF symbols JAR file, which are currently not under source control. -->

    <target name="help.unpackVpf">
        <property name="vpf.jarfile.dir" location="vpf-symbols-jar"/>
        <mkdir dir="${vpf.jarfile.dir}"/>
        <unzip src="vpf-symbols.jar" dest="${vpf.jarfile.dir}"/>
    </target>

    <target name="help.packVpf">
        <property name="vpf.jarfile.dir" location="vpf-symbols-jar"/>
        <delete file="vpf-symbols.jar"/>
        <jar destfile="vpf-symbols.jar" basedir="${vpf.jarfile.dir}">
            <manifest>
                <attribute name="Permissions" value="all-permissions"/>
            </manifest>
        </jar>
    </target>

    <!-- Helper tasks for compiling and linking the WebView native library for the current platform. Output libraries
         are placed in the WorldWind project root folder and overwrite any existing files of the same name.

         On Mac OS X this compiles the Objective-C sources under the folder 'lib-external/webview/macosx' into
         'libwebview.jnilib', and requires that the XCode and Java development toolkits for Mac are installed.

         On Windows this compiles the C and C++ sources under 'lib-external/webview/windows' into 'WebView32.dll' and
         'WebView64.dll', and requires that the Microsoft Visual C++ build tools are avialable on the path. -->

    <target name="help.assembleWebviewLibrary">
        <exec os="Mac OS X" dir="${basedir}/lib-external/webview/macosx" executable="/bin/sh" failonerror="true">
            <arg value="build.sh"/>
        </exec>
        <exec osfamily="Windows" dir="${basedir}/lib-external/webview/windows" executable="nmake" failonerror="true">
            <arg value="clean"/>
            <arg value="all"/>
        </exec>
    </target>

</project>
